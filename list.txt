Terminal commands

zsh => z shell (native Mac terminal)
Bash => changes to a bash terminal (legacy Mac terminal)
cd => change directory (folder)
cd .. => move up one directory
cd /User/Desktop => change directory to path provided
cd / => go to root directory
cd ~ => go to home directory
ls => list items in current directory
mkdir => make folder in current directory, can be multiple
mkdir folder/subfolder => make folder and subfolder
mkdir ../folder => make folder one level up
pwd => print working directory, show absolute path
which python3 => show path to python3
python3 -V (in normal terminal) => shows version of python3
man => shows manual for flags/command (ex. man ls) q to quit
ls -l => example of using flags to get additional information
ls -la => can combine flags to show combination of information (all files in directory)
touch => makes file/s within current folder (ex. touch index.html) if it doesn’t exist. otherwise it shows when it was modified & accessed
rm => remove a file (danger… permanently deletes)
rmdir => remove empty folders
rm -rf =>  removes folder and all content	 (ex. rm -rf Project1)
cmd + k => clear terminal
control + c => terminate current process
history => shows history of commands ran during this session
- Virtual Environment: 
Python Tutorial VENV (Mac & Linux) - How to Use Virtual Environments with the Built-In venv Module - https://www.youtube.com/watch?v=Kg1Yvry_Ydk
mk dir project_folder => create folder for new project
cd /project_folder => open project folder
python3 -m venv project_name (common to use venv as project name) =>  creates virtual environment
source project_name/bin/activate  =>  activates virtual environment
pip list => list packages installed in virtual environment
pip freeze > requirements.txt => creates txt file that list all installed packages and versions (can be any name for txt file)
cat requirements.txt => shows txt file
deactivate => deactivates virtual environment
rm -rf project_name => deletes virtual environment and all files therein
pip install -r requirements.txt => if requirements.txt exist then will copy over all packages
python3 -m venv venv —system-site-packages => installs all global packages in virtual environment any additional packages added will only be added
to virtual environment
- Conda Virtual Environment
conda => activates conda
conda create -n project_name python=3.6 => creates new environment
conda activate project_name => activates virtual environment (do not need to be in specific folder)
pip install package_name => install any required packages (tensorflow and keras important for machine learning)
conda deactivate => deactivates virtual environment
* In VScode use command pallete to Python: Select Interpreter, select path where Python3.6 is installed ~opt/anaconda3/envs/tensor/bin/python 

-VS code
code . => launch SC code (VS code icon has to be in Dock and in Command Palete - Shell Command: Install 'code' command in PATH

- GIT , https://www.youtube.com/watch?v=HVsySz-h9r4&t=1016s
git --version => shows version of git installed
git config --list => lists git information
git config --global user.name "Kedwards0107" => sets global username
git config --global user.email "kedwards0107@gmail.com" => sets global user email address
git verb --help => ex. git add --help
git init => initiates git
rm -rf .git => removes git directory
touch git.ignore => creates file that you can add which files to not upload to git, ex. .project
git status => shows git status - branch, changes, etc. 
git add -A => stages all changes
git add file_name => stages specific file ex. git add demo.py
git reset => removes all files from staging area
git commit -m "message about commit" => commits all staged files
git log => shows log for all commits
git clone <url>  <where to clone> => clones git repository ex. git clone https://github.com/kedwards0107/Terminal_Commands.git . (dot is just current directory)
git remote -v => shows remote repository
git branch -a => shows what branch you are on
git pull origin main => always pull from git before pushing (others may have added changes since you last pulled)
git push origin main => push your commited changes to repository

- GREP commands, way to search from terminal, https://youtu.be/VGgTmxXp7xQ
grep "text to search" file_name.txt => searches for text in given file
grep -w => returns exact (whole) word
grep -i => returns results without case sensitivity
grep -n => returns what line the match is on
grep -B 4 => shows 4 lines before where match was found. can be any number
grep -A 2 => shows 2 lines after where match was found. can be any number
grep -C 3 => shows 3 lines before and after where match was found. can be any number
grep -win "text to search" ./* => searches entire directory for match to text shows file name and line found on
grep -win "text to search" ./*.txt => searches txt files in entire directory for match to text shows file name and line found on
grep -r "text to search" . => recursive search that will also search subdirectory
grep -l "text to search" . => shows file that has match inside
grep -c "text to search" . => shows file that has match inside and number of matches in file
history | grep "git commit" => can combine searches using | symbol, shows git commit in history
history | grep "git commit" | grep "dotfile" => can use multiple
 - regular expressions in grep
 grep "...-...-...." => will search for phone number format 232-111-9832
 ggrep -P "\d{3}-\d{3}-\d{4}" names.txt => to use GNU version of regular expressions for digits
  ggrep -wirlP "\d{3}-\d{3}-\d{4}" names.txt => can use other limiters as well